/*
 * Ejemplo desarrollado por Erick Navarro
 * Blog: e-navarro.blogspot.com
 * Noviembre - 2015
 */
package project.client;

import java.awt.*;
import static java.awt.event.KeyEvent.VK_ENTER;
import java.awt.image.BufferedImage;
import java.io.*;
import java.util.List;
import java.util.ArrayList;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.*;
import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.event.*;
import javax.swing.text.*;
import javax.swing.DefaultListModel;

/**
 * Esta l√≠nea declara una clase p√∫blica llamada VentanaC que hereda de la clase
 * javax.swing.JFrame, que es la clase base para las ventanas en aplicaciones
 * Swing.
 */
public class VentanaC extends javax.swing.JFrame {

    private DefaultListModel<String> listModel; // Esta variable almacena un modelo para el componente JList que muestra la lista de contactos.
    private JList<String> listContactos; // JList para mostrar contactos

    /**
     * Este es el constructor de la clase VentanaC y se llama cuando se crea una
     * instancia de la clase. Inicializa los componentes de la interfaz gr√°fica
     * de usuario utilizando el m√©todo initComponents() (que generalmente es
     * autogenerado por el editor de formularios de Swing). Configura el JList
     * para mostrar contactos y define acciones para varios botones, como enviar
     * mensajes y seleccionar emojis.
     */
    public VentanaC() {
        initComponents();
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        String ip_puerto_nombre[] = getIP_Puerto_Nombre();
        String ip = ip_puerto_nombre[0];
        String puerto = ip_puerto_nombre[1];
        String nombre = ip_puerto_nombre[2];
        cliente = new Cliente(this, ip, Integer.valueOf(puerto), nombre);
        // Inicializar el modelo y el JList
        listModel = new DefaultListModel<>();
        listContactos = new JList<>(listModel);
        // Configurar el JList en un JScrollPane
        JScrollPane scrollPane = new JScrollPane(listContactos);
        scrollPane.setPreferredSize(new Dimension(200, 150)); // Ajusta el tama√±o seg√∫n sea necesario

        // Agregar el JScrollPane al layout
        getContentPane().add(scrollPane, BorderLayout.EAST); // Agregar al lado derecho de la ventana
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() { //Este m√©todo maneja el evento de clic en el bot√≥n ‚ÄúEnviar‚Äù.Recupera el mensaje del panel de texto, lo env√≠a al servidor a trav√©s del objeto Cliente y actualiza el historial del chat.

        cmbContactos = new javax.swing.JComboBox();
        btnEnviar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        btnEmoji = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtMensaje = new javax.swing.JTextPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtHistorial = new javax.swing.JTextPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) { //Este m√©todo maneja el evento de cierre de la ventana. Notifica al servidor sobre la desconexi√≥n del cliente.

                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        cmbContactos.setBorder(null);
        cmbContactos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbContactosActionPerformed(evt);
            }
        });

        btnEnviar.setText("Enviar");
        btnEnviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnviarActionPerformed(evt);
            }
        });

        jLabel1.setText("Destinatario:");

        btnEmoji.setText("üòÄ");
        btnEmoji.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEmojiActionPerformed(evt);
            }
        });

        txtMensaje.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                txtMensajePropertyChange(evt);
            }
        });
        txtMensaje.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtMensajeKeyPressed(evt);
            }
        });
        txtMensaje.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                verificarYReemplazarEmoji(e);
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
            }

            @Override
            public void changedUpdate(DocumentEvent e) {

            }
        });
        jScrollPane3.setViewportView(txtMensaje);

        txtHistorial.setEditable(false);
        jScrollPane2.setViewportView(txtHistorial);

        jList1.setBorder(javax.swing.BorderFactory.createTitledBorder("Usuarios Activos"));
        jList1.setModel(cmbContactos.getModel());
        jScrollPane1.setViewportView(jList1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 2, Short.MAX_VALUE)
                        .addComponent(btnEmoji)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEnviar))
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbContactos, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbContactos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnEnviar, javax.swing.GroupLayout.Alignment.TRAILING)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnEmoji)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Al hacer clic en el bot√≥n de enviar, se debe pedir al cliente del chat
     * que env√≠e al servidor el mensaje.
     *
     * @param evt
     */
    private void btnEnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnviarActionPerformed
        txtMensaje.requestFocusInWindow();
        if (cmbContactos.getSelectedItem() == null) {
            JOptionPane.showMessageDialog(this, "Debe escoger un destinatario v√°lido, si no \n"
                    + "hay uno, espere a que otro usuario se conecte\n"
                    + "para poder chatear con √©l.");
            return;
        }

        String cliente_receptor = cmbContactos.getSelectedItem().toString();
        StyledDocument doc = txtMensaje.getStyledDocument();
        StringBuilder mensajePlano = new StringBuilder();

        try {
            for (int i = 0; i < doc.getLength();) {
                Element element = doc.getCharacterElement(i);
                AttributeSet attributes = element.getAttributes();

                // Verifica si el elemento es un Icon
                Icon icon = StyleConstants.getIcon(attributes);
                if (icon != null) {
                    Object emojiTag = attributes.getAttribute("emojiTag");
                    if (emojiTag != null) {
                        mensajePlano.append(emojiTag.toString()); // Agrega la etiqueta del emoji
                    } else {
                        mensajePlano.append("[ICON]"); // Solo para depuraci√≥n
                    }
                    i = element.getEndOffset(); // Avanza al siguiente elemento
                } else {
                    // Elemento normal (texto)
                    int start = i;
                    int end = element.getEndOffset();
                    mensajePlano.append(doc.getText(start, end - start));
                    i = end;
                }
            }
        } catch (BadLocationException e) {
            e.printStackTrace();
        }

        cliente.enviarMensaje(cliente_receptor, mensajePlano.toString());

        // Mostrar el mensaje en el historial
        StyledDocument historial = txtHistorial.getStyledDocument();
        StyledDocument mensaje = txtMensaje.getStyledDocument();
        try {
            historial.insertString(historial.getLength(), "\n## Yo -> " + cliente_receptor + " ## : \n", null);  // A√±adir encabezado
            for (int i = 0; i < mensaje.getLength();) {
                Element element = mensaje.getCharacterElement(i);
                int endOffset = element.getEndOffset();
                String text = mensaje.getText(i, endOffset - i);
                AttributeSet attributes = element.getAttributes();

                historial.insertString(historial.getLength(), text, attributes);
                i = endOffset;
            }
        } catch (BadLocationException ex) {
            Logger.getLogger(VentanaC.class.getName()).log(Level.SEVERE, null, ex);
        }
        txtMensaje.setText("");
    }//GEN-LAST:event_btnEnviarActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
    }//GEN-LAST:event_formWindowClosed
    /**
     * Cuando la ventana se este cerrando se notifica al servidor que el cliente
     * se ha desconectado, por lo que los dem√°s clientes del chat no podr√°n
     * enviarle m√°s mensajes.
     *
     * @param evt
     */
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        cliente.confirmarDesconexion();
    }//GEN-LAST:event_formWindowClosing
    /*
*Este m√©todo maneja el evento de clic en el bot√≥n ‚ÄúEmoji‚Äù.
*Abre un cuadro de di√°logo donde los usuarios pueden seleccionar emojis para insertarlos en el mensaje.
     */
    private void btnEmojiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEmojiActionPerformed
        JDialog emojiDialog = new JDialog(this, "Seleccionar Emoji", true);
        emojiDialog.setSize(500, 500);

        JPanel emojiPanel = new JPanel(new GridLayout(0, 10, 5, 5));
        emojiPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

        try {
            // Cargar lista de archivos desde recursos
            List<String> emojiFiles = getResourceFiles("/emojis/");
            List<String> emojisNameFiles = getResourceFiles("/EmojisName/");
            Map<String, String> emojiMap = buildEmojiMap(emojiFiles, emojisNameFiles);
            for (String emojiFile : emojiFiles) {
                if (emojiFile.endsWith(".png")) {
                    // Cargar imagen como recurso
                    InputStream emojiStream = getClass().getResourceAsStream("/emojis/" + emojiFile);
                    if (emojiStream != null) {
                        BufferedImage emojiImage = ImageIO.read(emojiStream);
                        ImageIcon icon = new ImageIcon(emojiImage.getScaledInstance(32, 32, Image.SCALE_SMOOTH));

                        // Crear bot√≥n con el emoji
                        JButton emojiButton = new JButton(icon);
                        emojiButton.setPreferredSize(new Dimension(40, 40));
                        emojiButton.addActionListener(e -> {
                            emojiDialog.dispose();
                            String emojiName = emojiFile.replace(".png", "");
                            txtMensaje.requestFocusInWindow();
                            agregarEmojiEnJTextPane(txtMensaje, emojiName);
                        });
                        emojiPanel.add(emojiButton);

                        // Agregar al mapa de nombres (si se necesita)
                        emojiMap.put(emojiFile, emojiFile);
                    }
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al cargar los emojis desde recursos: " + e.getMessage());
        }

        emojiDialog.add(new JScrollPane(emojiPanel));
        emojiDialog.setLocationRelativeTo(this);
        emojiDialog.setVisible(true);

    }//GEN-LAST:event_btnEmojiActionPerformed

    private void txtMensajeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMensajeKeyPressed
        if (evt.getKeyCode() == VK_ENTER) {
            if (evt.isShiftDown()) {
                // Permitir salto de l√≠nea en JTextArea
                txtMensaje.setText(txtMensaje.getText() + "\n");
            } else {
                evt.consume();
                if (isJTextPaneEmpty(txtMensaje)) {
                    return;
                }
                if (cmbContactos.getSelectedItem() == null) {
                    JOptionPane.showMessageDialog(this, "Debe escoger un destinatario v√°lido, si no \n"
                            + "hay uno, espere a que otro usuario se conecte\n"
                            + "para poder chatear con √©l.");
                    return;
                }

                String cliente_receptor = cmbContactos.getSelectedItem().toString();
                StyledDocument doc = txtMensaje.getStyledDocument();
                StringBuilder mensajePlano = new StringBuilder();

                try {
                    for (int i = 0; i < doc.getLength();) {
                        Element element = doc.getCharacterElement(i);
                        AttributeSet attributes = element.getAttributes();

                        // Verifica si el elemento es un Icon
                        Icon icon = StyleConstants.getIcon(attributes);
                        if (icon != null) {
                            Object emojiTag = attributes.getAttribute("emojiTag");
                            if (emojiTag != null) {
                                mensajePlano.append(emojiTag.toString()); // Agrega la etiqueta del emoji
                            } else {
                                mensajePlano.append("[ICON]"); // Solo para depuraci√≥n
                            }
                            i = element.getEndOffset(); // Avanza al siguiente elemento
                        } else {
                            // Elemento normal (texto)
                            int start = i;
                            int end = element.getEndOffset();
                            mensajePlano.append(doc.getText(start, end - start));
                            i = end;
                        }
                    }
                } catch (BadLocationException e) {
                    e.printStackTrace();
                }

                cliente.enviarMensaje(cliente_receptor, mensajePlano.toString());

                // Mostrar el mensaje en el historial
                StyledDocument historial = txtHistorial.getStyledDocument();
                StyledDocument mensaje = txtMensaje.getStyledDocument();
                try {
                    historial.insertString(historial.getLength(), "\n## Yo -> " + cliente_receptor + " ## : \n", null);  // A√±adir encabezado
                    for (int i = 0; i < mensaje.getLength();) {
                        Element element = mensaje.getCharacterElement(i);
                        int endOffset = element.getEndOffset();
                        String text = mensaje.getText(i, endOffset - i);
                        AttributeSet attributes = element.getAttributes();

                        historial.insertString(historial.getLength(), text, attributes);
                        i = endOffset;
                    }
                } catch (BadLocationException ex) {
                    Logger.getLogger(VentanaC.class.getName()).log(Level.SEVERE, null, ex);
                }
                txtMensaje.setText("");
            }

        }

    }//GEN-LAST:event_txtMensajeKeyPressed

    private void txtMensajePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_txtMensajePropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMensajePropertyChange

    private void cmbContactosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbContactosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbContactosActionPerformed

    public Map<String, String> buildEmojiMap(List<String> prefixedFiles, List<String> unprefixedFiles) {
        Map<String, String> emojiMap = new HashMap<>();
        for (String prefixedFile : prefixedFiles) {
            String baseName = prefixedFile.substring(prefixedFile.indexOf('_') + 1, prefixedFile.length() - 4);
            for (String unprefixedFile : unprefixedFiles) {
                if (unprefixedFile.startsWith(baseName)) {
                    emojiMap.put(prefixedFile, unprefixedFile);
                    break;  // No es necesario continuar buscando despu√©s de la primera coincidencia
                }
            }
        }
        return emojiMap;
    }

    /**
     *
     * @param path
     * @return
     * @throws IOException
     */
    public List<String> getResourceFiles(String path) throws IOException {
        List<String> filenames = new ArrayList<>();
        try (InputStream in = getClass().getResourceAsStream(path); BufferedReader br = new BufferedReader(new InputStreamReader(in))) {
            String resource;
            while ((resource = br.readLine()) != null) {
                filenames.add(resource);
            }
        }
        return filenames;
    }

    private void verificarYReemplazarEmoji(DocumentEvent e) {
        StyledDocument doc = (StyledDocument) e.getDocument();
        try {
            // Obt√©n el texto completo del JTextPane
            String text = doc.getText(0, doc.getLength());

            // Encuentra emojis en formato :emoji: usando una expresi√≥n regular
            Pattern emojiPattern = Pattern.compile(":(\\w+):");
            Matcher matcher = emojiPattern.matcher(text);

            while (matcher.find()) {
                String emojiName = matcher.group(1);

                // Verificar si el archivo del emoji existe como recurso
                InputStream emojiStream = getClass().getResourceAsStream("/EmojisName/" + emojiName + ".png");
                if (emojiStream == null) {
                    System.out.println("Emoji no encontrado: " + emojiName);
                    continue;
                }

                // Crear y redimensionar el icono
                BufferedImage emojiImage = ImageIO.read(emojiStream);
                ImageIcon icon = new ImageIcon(emojiImage.getScaledInstance(20, 20, Image.SCALE_SMOOTH));
                SimpleAttributeSet attrSet = new SimpleAttributeSet();
                StyleConstants.setIcon(attrSet, icon);
                attrSet.addAttribute("emojiTag", ":" + emojiName + ":");

                // Reemplazar el texto del emoji con el icono
                int start = matcher.start();
                int end = matcher.end();

                // Diferir la modificaci√≥n al documento para evitar problemas de concurrencia
                SwingUtilities.invokeLater(() -> {
                    try {
                        doc.remove(start, end - start); // Eliminar el texto del emoji original
                        doc.insertString(start, " ", attrSet);  // Insertar el icono en lugar del emoji
                    } catch (BadLocationException ex) {
                        ex.printStackTrace();
                    }
                });
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private void agregarEmojiEnJTextPane(JTextPane textPane, String emojiName) {
        StyledDocument doc = textPane.getStyledDocument();
        // Cargar emoji desde recursos
        InputStream emojiStream = getClass().getResourceAsStream("/EmojisName/" + emojiName + ".png");

        if (emojiStream == null) {
            return;
        }

        try {
            BufferedImage emojiImage = ImageIO.read(emojiStream);
            ImageIcon icon = new ImageIcon(emojiImage.getScaledInstance(20, 20, Image.SCALE_SMOOTH)); // Ajusta el tama√±o aqu√≠

            // Configurar el atributo del icono
            SimpleAttributeSet attrSet = new SimpleAttributeSet();
            StyleConstants.setIcon(attrSet, icon);
            attrSet.addAttribute("emojiTag", ":" + emojiName + ":");
            doc.insertString(doc.getLength(), " ", attrSet); // Espacio con el icono
        } catch (BadLocationException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private boolean isJTextPaneEmpty(JTextPane textPane) {
        return textPane.getDocument().getLength() == 0;

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        //</editor-fold>
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaC().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEmoji;
    private javax.swing.JButton btnEnviar;
    private javax.swing.JComboBox cmbContactos;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextPane txtHistorial;
    private javax.swing.JTextPane txtMensaje;
    // End of variables declaration//GEN-END:variables
    /**
     * Constante que almacena el puerto por defecto para la aplicaci√≥n.
     */
    private final String DEFAULT_PORT = "10101";
    /**
     * Constante que almacena la IP por defecto (localhost) para el servidor.
     */
    private final String DEFAULT_IP = "127.0.0.1";
    /**
     * Constante que almacena el cliente, con el cual se gestiona la
     * comunicaci√≥n con el servidor.
     */
    private final Cliente cliente;

    /**
     * Agrega un contacto al JComboBox de contactos.
     *
     * @param contacto
     */
    void addContacto(String contacto) {
        cmbContactos.addItem(contacto);
        listModel.addElement(contacto);
    }

    /**
     * Agrega un nuevo mensaje al historial de la conversaci√≥n.
     *
     * @param emisor
     * @param mensaje
     */
    void addMensaje(String emisor, String mensaje) {
        StyledDocument historial = txtHistorial.getStyledDocument();
        try {
            // A√±adir encabezado
            historial.insertString(historial.getLength(), "\n##### " + emisor + " ##### : \n", null);

            // Reemplazar etiquetas :emoji: con √≠conos
            Pattern emojiPattern = Pattern.compile(":(\\w+):"); // Busca etiquetas :emoji:
            Matcher matcher = emojiPattern.matcher(mensaje);

            int lastIndex = 0;
            while (matcher.find()) {
                String textBefore = mensaje.substring(lastIndex, matcher.start()); // Texto antes del emoji
                String emojiName = matcher.group(1); // Nombre del emoji

                // Inserta el texto antes del emoji
                if (!textBefore.isEmpty()) {
                    historial.insertString(historial.getLength(), textBefore, null);
                }

                // Verifica si existe el archivo del emoji como recurso
                InputStream emojiStream = getClass().getResourceAsStream("/EmojisName/" + emojiName + ".png");
                if (emojiStream != null) {
                    // Crea y redimensiona el √≠cono
                    BufferedImage emojiImage = ImageIO.read(emojiStream);
                    ImageIcon icon = new ImageIcon(emojiImage.getScaledInstance(20, 20, Image.SCALE_SMOOTH));
                    SimpleAttributeSet attrSet = new SimpleAttributeSet();
                    StyleConstants.setIcon(attrSet, icon);
                    attrSet.addAttribute("emojiTag", ":" + emojiName + ":");

                    // Inserta el √≠cono en el historial
                    historial.insertString(historial.getLength(), " ", attrSet);
                } else {
                    // Si no se encuentra el emoji, deja el texto como est√°
                    historial.insertString(historial.getLength(), matcher.group(), null);
                }

                lastIndex = matcher.end();
            }

            // Inserta cualquier texto que quede despu√©s del √∫ltimo emoji
            if (lastIndex < mensaje.length()) {
                historial.insertString(historial.getLength(), mensaje.substring(lastIndex), null);
            }

        } catch (BadLocationException ex) {
            Logger.getLogger(VentanaC.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    /**
     * Se configura el t√≠tulo de la ventana para una nueva sesi√≥n.
     *
     * @param identificador
     */
    void sesionIniciada(String identificador) {
        this.setTitle(" --- " + identificador + " --- ");
    }

    /**
     * M√©todo que abre una ventana para que el usuario ingrese la IP del host en
     * el que corre el servidor, el puerto con el que escucha y el nombre con el
     * que quiere participar en el chat.
     *
     * @return
     */
    private String[] getIP_Puerto_Nombre() {
        String s[] = new String[3];
        s[0] = DEFAULT_IP;
        s[1] = DEFAULT_PORT;
        JTextField ip = new JTextField(20);
        JTextField puerto = new JTextField(20);
        JTextField usuario = new JTextField(20);
        ip.setText(DEFAULT_IP);
        puerto.setText(DEFAULT_PORT);
        usuario.setText("Usuario");
        JPanel myPanel = new JPanel();
        myPanel.setLayout(new GridLayout(3, 2));
        myPanel.add(new JLabel("IP del Servidor:"));
        myPanel.add(ip);
        myPanel.add(new JLabel("Puerto de la conexi√≥n:"));
        myPanel.add(puerto);
        myPanel.add(new JLabel("Escriba su nombre:"));
        myPanel.add(usuario);
        int result = JOptionPane.showConfirmDialog(null, myPanel,
                "Configuraciones de la comunicaci√≥n", JOptionPane.OK_CANCEL_OPTION);
        if (result == JOptionPane.OK_OPTION) {
            s[0] = ip.getText();
            s[1] = puerto.getText();
            s[2] = usuario.getText();
        } else {
            System.exit(0);
        }
        return s;
    }

    /**
     * M√©todo que elimina cierto cliente de la lista de contactos, este se llama
     * cuando cierto usuario cierra sesi√≥n.
     *
     * @param identificador
     */
    void eliminarContacto(String identificador) {
        for (int i = 0; i < cmbContactos.getItemCount(); i++) {
            if (cmbContactos.getItemAt(i).toString().equals(identificador)) {
                cmbContactos.removeItemAt(i);
                return;
            }
        }
        listModel.removeElement(identificador);
    }

}
